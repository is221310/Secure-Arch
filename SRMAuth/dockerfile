# Use an official Python runtime as a parent image
FROM python:3.12-slim

# Declare build args
ARG JWT_SECRET_KEY
ARG JWT_ALGORITHM
ARG JWT_EXPIRATION_TIME
ARG JWT_REFRESH_EXPIRATION_TIME

ARG REDIS_HOST
ARG REDIS_PORT
ARG REDIS_DB
ARG REDIS_PASSWORD
ARG DECODE_RESPONSE

ARG POSTGRES_HOST
ARG POSTGRES_PORT
ARG POSTGRES_DB
ARG POSTGRES_USER
ARG POSTGRES_PASSWORD
ARG POSTGRES_SCHEMA

# expose as ENV
ENV JWT_SECRET_KEY=$JWT_SECRET_KEY
ENV JWT_ALGORITHM=$JWT_ALGORITHM
ENV JWT_EXPIRATION_TIME=$JWT_EXPIRATION_TIME
ENV JWT_REFRESH_EXPIRATION_TIME=$JWT_REFRESH_EXPIRATION_TIME

ENV REDIS_HOST=$REDIS_HOST
ENV REDIS_PORT=$REDIS_PORT
ENV REDIS_DB=$REDIS_DB
ENV REDIS_PASSWORD=$REDIS_PASSWORD
ENV DECODE_RESPONSE=$DECODE_RESPONSE

ENV POSTGRES_HOST=$POSTGRES_HOST
ENV POSTGRES_PORT=$POSTGRES_PORT
ENV POSTGRES_DB=$POSTGRES_DB
ENV POSTGRES_USER=$POSTGRES_USER
ENV POSTGRES_PASSWORD=$POSTGRES_PASSWORD
ENV POSTGRES_SCHEMA=$POSTGRES_SCHE

# Set the working directory in the container
WORKDIR /app

# Copy the requirements file into the container at /app
COPY requirements.txt .

# Install any needed packages specified in requirements.txt
RUN pip install --no-cache-dir -r requirements.txt

# Copy the rest of the application code into the container at /app
COPY . .

# Make port 8000 available to the world outside this container
EXPOSE 8000

# Define environment variable
ENV MODULE_NAME="main"
ENV VARIABLE_NAME="app"

# Run main.py when the container launches
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]
