@page "/dashboard"
@inject HttpClient Http
@inject NavigationManager NavigationManager

<PageTitle>Dashboard</PageTitle>

@if (_loading)
{
    <MudText Typo="Typo.subtitle1" Align="Align.Center" Class="mt-6">Lade Daten...</MudText>
}
else if (!string.IsNullOrEmpty(_errorMessage))
{
    <MudAlert Severity="Severity.Error" Class="mt-4">@_errorMessage</MudAlert>
}
else if (_sensorGroups.Count == 0)
{
    <MudText Typo="Typo.subtitle1" Align="Align.Center" Class="mt-6">Keine Sensordaten gefunden.</MudText>
}
else
{
    <MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
        @foreach (var group in _sensorGroups)
        {
            <MudCard Class="mb-6">
                <MudCardHeader>
                    <MudText Typo="Typo.h5">@group.SensorName</MudText>
                </MudCardHeader>
                <MudCardContent>
                    <MudTabs Rounded="true" Centered="true">
                        <MudTabPanel Text="IP Status" Icon="@Icons.Material.Filled.Wifi">
                            <MudTable Items="@group.IpResults" Hover="true" Bordered="true" Dense="true" Elevation="0">
                                <HeaderContent>
                                    <MudTh>IP-Adresse</MudTh>
                                    <MudTh>Status</MudTh>
                                    <MudTh>Zeit (lokal)</MudTh>
                                </HeaderContent>
                                <RowTemplate>
                                    <MudTd><code>@context.ip_address</code></MudTd>
                                    <MudTd>
                                        <MudText Color="@(context.result ? Color.Success : Color.Error)" Typo="Typo.body2" Bold="true">
                                            @(context.result ? "Online" : "Offline")
                                        </MudText>
                                    </MudTd>
                                    <MudTd>@context.timestamp.ToLocalTime().ToString("yyyy-MM-dd HH:mm")</MudTd>
                                </RowTemplate>
                            </MudTable>
                        </MudTabPanel>

                        <MudTabPanel Text="Temperaturen" Icon="@Icons.Material.Filled.Thermostat">
                            <MudTable Items="@group.Temperaturen" Hover="true" Bordered="true" Dense="true" Elevation="0">
                                <HeaderContent>
                                    <MudTh>Temperatur (°C)</MudTh>
                                    <MudTh>Zeit (lokal)</MudTh>
                                </HeaderContent>
                                <RowTemplate>
                                    <MudTd>@context.temperatur.ToString("0.0")</MudTd>
                                    <MudTd>@context.timestamp.ToLocalTime().ToString("yyyy-MM-dd HH:mm")</MudTd>
                                </RowTemplate>
                            </MudTable>
                        </MudTabPanel>
                    </MudTabs>
                </MudCardContent>
            </MudCard>
        }
    </MudContainer>
}

@code {
    private bool _loading = true;
    private string? _errorMessage;

    private List<SensorGroup> _sensorGroups = new();

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        _errorMessage = null;

        try
        {
            // Hole IP Results und Temperaturen für den aktuellen User
            var ipResults = await Http.GetFromJsonAsync<List<IpResultDto>>("DataService/ipresults/by-user") ?? new();
            var temperaturen = await Http.GetFromJsonAsync<List<TemperaturDto>>("DataService/temperaturen/by-user") ?? new();

            // Gruppieren nach Sensor ID + Sensor Name (SensorName im DTO angenommen)
            var sensorIds = ipResults.Select(i => (i.sensor_id, i.sensor_name))
                .Union(temperaturen.Select(t => (t.sensor_id, t.sensor_name)))
                .Distinct()
                .ToList();

            _sensorGroups = sensorIds.Select(sid => new SensorGroup
                {
                    SensorId = sid.sensor_id,
                    SensorName = sid.sensor_name,
                    IpResults = ipResults.Where(i => i.sensor_id == sid.sensor_id).OrderByDescending(i => i.timestamp).ToList(),
                    Temperaturen = temperaturen.Where(t => t.sensor_id == sid.sensor_id).OrderByDescending(t => t.timestamp).ToList()
                }).ToList();
        }
        catch (HttpRequestException ex)
        {
            if (ex.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                NavigationManager.NavigateTo("/login", true);
            }
            else
            {
                _errorMessage = "Fehler beim Laden der Daten.";
            }
        }
        finally
        {
            _loading = false;
        }
    }

    private class SensorGroup
    {
        public int SensorId { get; set; }
        public string SensorName { get; set; } = string.Empty;
        public List<IpResultDto> IpResults { get; set; } = new();
        public List<TemperaturDto> Temperaturen { get; set; } = new();
    }

    public class IpResultDto
    {
        public int id { get; set; }
        public int sensor_id { get; set; }
        public string sensor_name { get; set; } = "";
        public string ip_address { get; set; } = "";
        public bool result { get; set; }
        public DateTime timestamp { get; set; }
    }

    public class TemperaturDto
    {
        public int id { get; set; }
        public int sensor_id { get; set; }
        public string sensor_name { get; set; } = "";
        public double temperatur { get; set; }
        public DateTime timestamp { get; set; }
    }
}
