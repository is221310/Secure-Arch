@page "/sensorassignment"
@inject HttpClient Http
@using SecureArchApp.Client.Models

@using System.Text.Json.Serialization
@using MudBlazor

<MudPaper Class="pa-4">

    <MudText Typo="Typo.h5" Class="mb-4">Sensor-Kunden-Zuweisung</MudText>

    <MudTable Items="sensoren" Dense="true" Hover="true" Bordered="true" Elevation="1">
        <HeaderContent>
            <MudTh>Sensor id</MudTh>
            <MudTh>Sensor Name</MudTh>
            <MudTh>Beschreibung</MudTh>
            <MudTh>Kunde</MudTh>
            <MudTh>Zuweisen</MudTh>
        </HeaderContent>
        <RowTemplate Context="sensor">
            <MudTd>@sensor.sensor_id</MudTd>
            <MudTd>@sensor.sensor_name</MudTd>
            <MudTd>@sensor.beschreibung</MudTd>
            <MudTd>@GetKundenName(sensor.kunden_id)</MudTd>
            <MudTd>
                <MudSelect T="int" Label="Kunde wählen"
                           Value="@GetKundenId(sensor.sensor_id)"
                           ValueChanged="@(v => SetKundenId(sensor.sensor_id, v))"
                           Dense="true"
                           Style="min-width:150px">
                    <MudSelectItem Value="0">-- wählen --</MudSelectItem>
                    @foreach (var kunde in kunden)
                    {
                        <MudSelectItem Value="@kunde.kunden_id">@kunde.kunden_name</MudSelectItem>
                    }
                </MudSelect>
            </MudTd>
        </RowTemplate>
    </MudTable>

    <MudButton Class="mt-4" Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveAssignments">
        Zuweisungen speichern
    </MudButton>

</MudPaper>

@code {
    private List<Kunde> kunden = new();
    private List<Sensor> sensoren = new();
    private Dictionary<int, int> zuweisungWerte = new();

    protected override async Task OnInitializedAsync()
    {
        kunden = await Http.GetFromJsonAsync<List<Kunde>>("api/kunde") ?? new();
        sensoren = await Http.GetFromJsonAsync<List<Sensor>>("api/sensor/withCustomers") ?? new();

        foreach (var s in sensoren)
        {
            zuweisungWerte[s.sensor_id] = s.kunden_id ?? 0;
        }
    }

    private int GetKundenId(int sensorId)
    {
        return zuweisungWerte.TryGetValue(sensorId, out var kundenId) ? kundenId : 0;
    }

    private void SetKundenId(int sensorId, int kundenId)
    {
        zuweisungWerte[sensorId] = kundenId;
    }

    private string GetKundenName(int? kundenId)
    {
        if (kundenId == null || kundenId == 0)
            return "-";

        var kunde = kunden.FirstOrDefault(k => k.kunden_id == kundenId);
        return kunde?.kunden_name ?? "-";
    }

    private async Task SaveAssignments()
    {
        var payload = zuweisungWerte.Select(kvp => new
        {
            sensor_id = kvp.Key,
            kunden_id = kvp.Value == 0 ? (int?)null : kvp.Value
        }).ToList();

        var response = await Http.PostAsJsonAsync("api/sensor/assignments", payload);

        if (response.IsSuccessStatusCode)
        {
           
            await OnInitializedAsync();
            Snackbar.Add("Zuweisungen gespeichert!", Severity.Success);
        }
        else
        {
            Snackbar.Add("Fehler beim Speichern", Severity.Error);
        }
    }

 
    [Inject] ISnackbar Snackbar { get; set; } = default!;
}
