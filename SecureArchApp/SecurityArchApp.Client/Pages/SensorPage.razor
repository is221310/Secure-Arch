@page "/admin/sensors"
@inject HttpClient Http
@inject IDialogService DialogService
@layout AdminLayout

@using SecureArchApp.Client.Models
@using SecureArchApp.Client.Layout

<MudPaper Class="pa-4">
    <MudText Typo="Typo.h5" Class="mb-4">Sensorverwaltung</MudText>

    <MudButton StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" OnClick="OpenNeuerForm" Class="my-3">
        Neuer Sensor
    </MudButton>

    @if (_formularSichtbar)
    {
        <MudPaper Class="p-4 mb-4" Elevation="2">
            <MudText Typo="Typo.h6">@(_bearbeiteSensor.sensor_id == 0 ? "Neuer Sensor" : "Sensor bearbeiten")</MudText>

            <MudTextField @bind-Value="_bearbeiteSensor.sensor_name" Label="Sensorname" Required="true" />
            <MudTextField @bind-Value="_bearbeiteSensor.beschreibung" Label="Beschreibung" />

            <MudDivider Class="my-2" />
            <MudText Typo="Typo.subtitle2">IP-Adressen</MudText>

            @foreach (var ip in _bearbeiteSensor.ip_addresses.Select((value, index) => new { value, index }))
            {
                <div class="d-flex align-items-center mb-2">
                    <MudTextField T="string" @bind-Value="_bearbeiteSensor.ip_addresses[ip.index]" Label="IP-Adresse" Class="me-2" />
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => EntferneIp(ip.index)" />
                </div>
            }

            <MudButton Variant="Variant.Outlined" OnClick="HinzufuegenIp">+ IP-Adresse hinzufügen</MudButton>

            <MudDivider Class="my-3" />

            <MudText Typo="Typo.subtitle2">Secret Key</MudText>
            <MudTextField @bind-Value="_secretKey" Label="Secret setzen" InputType="InputType.Password" />
            <MudText Typo="Typo.caption" Color="Color.Secondary">
                Das Secret wird beim Speichern gehashed. Dieses Feld ist optional.
            </MudText>

            <MudDivider Class="my-3" />

            <MudButton Color="Color.Primary" OnClick="SpeichernSensor" Class="mt-3">Speichern</MudButton>
            <MudButton Color="Color.Secondary" OnClick="CloseForm" Class="mt-3 ml-2">Abbrechen</MudButton>
        </MudPaper>
    }

    <MudTable Items="sensoren" Dense="true" Bordered="true" Hover="true" Elevation="1">
        <HeaderContent>
            <MudTh>ID</MudTh>
            <MudTh>Name</MudTh>
            <MudTh>Beschreibung</MudTh>
            <MudTh>IP-Adressen</MudTh>
            <MudTh>Erstellt am</MudTh>
            <MudTh>Aktionen</MudTh>
        </HeaderContent>
        <RowTemplate Context="sensor">
            <MudTd>@sensor.sensor_id</MudTd>
            <MudTd>@sensor.sensor_name</MudTd>
            <MudTd>@sensor.beschreibung</MudTd>
            <MudTd>
                @foreach (var ip in sensor.ip_addresses)
                {
                    <div>@ip</div>
                }
            </MudTd>
            <MudTd>@sensor.created_at.ToShortDateString()</MudTd>
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" OnClick="() => OpenBearbeitenForm(sensor)" />
                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => DeleteSensor(sensor.sensor_id)" />
            </MudTd>
        </RowTemplate>
    </MudTable>
</MudPaper>

@code {
    private List<Sensor> sensoren = new();
    private Sensor _bearbeiteSensor = new();
    private bool _formularSichtbar = false;
    private string _secretKey = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LadeSensoren();
    }

    private async Task LadeSensoren()
    {
        sensoren = await Http.GetFromJsonAsync<List<Sensor>>("api/sensor") ?? new();
    }

    private void OpenNeuerForm()
    {
        _bearbeiteSensor = new Sensor { ip_addresses = new List<string>() };
        _secretKey = string.Empty;
        _formularSichtbar = true;
    }

    private void OpenBearbeitenForm(Sensor sensor)
    {
        _bearbeiteSensor = new Sensor
            {
                sensor_id = sensor.sensor_id,
                sensor_name = sensor.sensor_name,
                beschreibung = sensor.beschreibung,
                ip_addresses = new List<string>(sensor.ip_addresses),
                created_at = sensor.created_at
            };
        _secretKey = string.Empty;
        _formularSichtbar = true;
    }

    private void CloseForm()
    {
        _formularSichtbar = false;
        _secretKey = string.Empty;
    }

    private void HinzufuegenIp()
    {
        _bearbeiteSensor.ip_addresses.Add(string.Empty);
    }

    private void EntferneIp(int index)
    {
        if (index >= 0 && index < _bearbeiteSensor.ip_addresses.Count)
        {
            _bearbeiteSensor.ip_addresses.RemoveAt(index);
        }
    }

    private async Task SpeichernSensor()
    {
        if (string.IsNullOrWhiteSpace(_bearbeiteSensor.sensor_name))
            return;

        HttpResponseMessage response;

        if (_bearbeiteSensor.sensor_id == 0)
        {
            // Sensor anlegen
            response = await Http.PostAsJsonAsync("api/sensor", _bearbeiteSensor);

            if (response.IsSuccessStatusCode)
            {
                // Neuen Sensor mit ID laden
                var createdSensor = await response.Content.ReadFromJsonAsync<Sensor>();
                if (createdSensor != null && !string.IsNullOrWhiteSpace(_secretKey))
                {
                    // Secret setzen
                    var secretResponse = await Http.PostAsJsonAsync(
                        $"api/sensor/{createdSensor.sensor_id}/set-secret",
                        new { secret = _secretKey });

                    if (!secretResponse.IsSuccessStatusCode)
                    {
                        // Fehlerbehandlung (optional Snackbar/Dialog)
                    }
                }
            }
        }
        else
        {
            // Sensor aktualisieren
            response = await Http.PutAsJsonAsync($"api/sensor/{_bearbeiteSensor.sensor_id}", _bearbeiteSensor);

            if (response.IsSuccessStatusCode && !string.IsNullOrWhiteSpace(_secretKey))
            {
                // Secret setzen
                var secretResponse = await Http.PostAsJsonAsync(
                    $"api/sensor/{_bearbeiteSensor.sensor_id}/set-secret",
                    new { secret = _secretKey });

                if (!secretResponse.IsSuccessStatusCode)
                {
                    // Fehlerbehandlung (optional)
                }
            }
        }

        if (response.IsSuccessStatusCode)
        {
            _formularSichtbar = false;
            _secretKey = string.Empty;
            await LadeSensoren();
        }
        else
        {
            // Optional: Fehleranzeige per Snackbar/Dialog
        }
    }


    private async Task DeleteSensor(int sensorId)
    {
        bool? confirmed = await DialogService.ShowMessageBox(
            "Löschen bestätigen",
            "Diesen Sensor wirklich löschen?",
            yesText: "Ja", cancelText: "Nein");

        if (confirmed == true)
        {
            await Http.DeleteAsync($"api/sensor/{sensorId}");
            await LadeSensoren();
        }
    }
}
