@inherits LayoutComponentBase
@inject HttpClient Http
@inject NavigationManager NavigationManager

@if (_isLoading)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
}
else if (_hasAccess)
{
    <MudThemeProvider Theme="@_theme" IsDarkMode="_isDarkMode" />
    <MudPopoverProvider />
    <MudDialogProvider />
    <MudSnackbarProvider />
    <MudLayout>
        <MudAppBar Color="Color.Inherit" Elevation="4">
            <MudText Typo="Typo.h6">Adminbereich</MudText>
            <MudSpacer />
            <MudButton OnClick="@(() => NavigationManager.NavigateTo("/"))">Zurück</MudButton>
        </MudAppBar>

        <MudDrawer Open="true" Elevation="1" Variant="DrawerVariant.Persistent">
            <MudNavMenu>
                <MudNavLink Href="/admin/customers" Icon="@Icons.Material.Filled.AttachMoney">Kunden</MudNavLink>
                <MudNavLink Href="/admin/users" Icon="@Icons.Material.Filled.Person">User</MudNavLink>
                <MudNavLink Href="/admin/sensors" Icon="@Icons.Material.Filled.Sensors">Sensors</MudNavLink>
                <MudNavLink Href="/admin/sensorassignment" Icon="@Icons.Material.Filled.PivotTableChart">Sensor-Kunden Zuweisung</MudNavLink>
            </MudNavMenu>
        </MudDrawer>

        <MudMainContent>
            @Body
        </MudMainContent>
    </MudLayout>
}
else
{
    <MudAlert Severity="Severity.Error">Kein Zugriff auf diesen Bereich.</MudAlert>
}

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

@code {
    private bool _drawerOpen = true;
    private bool _isDarkMode = true;
    private bool _isLoading = true;
    private bool _hasAccess = false;
    private MudTheme? _theme = null;

    protected override async Task OnInitializedAsync()
    {
        _theme = new()
            {
                PaletteLight = _lightPalette,
                PaletteDark = _darkPalette,
                LayoutProperties = new LayoutProperties()
            };

        try
        {
            var response = await Http.GetAsync("/CoreService/getrole");

            if (response.IsSuccessStatusCode)
            {
                var role = await response.Content.ReadAsStringAsync();
                _hasAccess = role.Contains("Admin", StringComparison.OrdinalIgnoreCase);
            }
            else
            {
                _hasAccess = false;
            }
        }
        catch
        {
            _hasAccess = false;
        }
        finally
        {
            _isLoading = false;
        }
    }

    private void DrawerToggle() => _drawerOpen = !_drawerOpen;

    private void DarkModeToggle() => _isDarkMode = !_isDarkMode;

    private readonly PaletteLight _lightPalette = new()
        {
            Black = "#110e2d",
            AppbarText = "#424242",
            AppbarBackground = "rgba(255,255,255,0.8)",
            DrawerBackground = "#ffffff",
            GrayLight = "#e8e8e8",
            GrayLighter = "#f9f9f9",
        };

    private readonly PaletteDark _darkPalette = new()
        {
            Primary = "#7e6fff",
            Surface = "#1e1e2d",
            Background = "#1a1a27",
            BackgroundGray = "#151521",
            AppbarText = "#92929f",
            AppbarBackground = "rgba(26,26,39,0.8)",
            DrawerBackground = "#1a1a27",
            ActionDefault = "#74718e",
            ActionDisabled = "#9999994d",
            ActionDisabledBackground = "#605f6d4d",
            TextPrimary = "#b2b0bf",
            TextSecondary = "#92929f",
            TextDisabled = "#ffffff33",
            DrawerIcon = "#92929f",
            DrawerText = "#92929f",
            GrayLight = "#2a2833",
            GrayLighter = "#1e1e2d",
            Info = "#4a86ff",
            Success = "#3dcb6c",
            Warning = "#ffb545",
            Error = "#ff3f5f",
            LinesDefault = "#33323e",
            TableLines = "#33323e",
            Divider = "#292838",
            OverlayLight = "#1e1e2d80",
        };

    public string DarkLightModeButtonIcon => _isDarkMode
        ? Icons.Material.Rounded.AutoMode
        : Icons.Material.Outlined.DarkMode;
}
